# This file is a template, and might need editing before it works on your project.
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Nodejs.gitlab-ci.yml

# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/
# image: node:stable

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: https://docs.gitlab.com/ee/ci/services/index.html

# services:
#   - mysql:latest
#   - redis:latest
#   - postgres:latest

# This folder is cached between builds
# https://docs.gitlab.com/ee/ci/yaml/index.html#cache
# cache:
#   paths:
#     - node_modules/

# test_async:
#   script:
#     - npm install
#     - node ./specs/start.js ./specs/async.spec.js

# test_db:
#   script:
#     - npm install
#     - node ./specs/start.js ./specs/db-postgres.spec.js


stages:
  - build
  - test
  - deploy

# deploy:
#   stage: deploy
#   script:
#     -echo "Define your deployment script!"
#     -apk add --no-cache rsync openssh
#     -mkdir -p ~/.ssh
#     -echo "SSH_PRIVATE_KEY" >> ~/.ssh/id_dsa
#     -chmod 600 ~/.ssh/id_ssa


# deploy:
#   stage: deploy
#   script:
#     - echo "Deploying your Node.js app..."
#     - ssh user@your-remote-server "cd /path/to/app && rm -rf * && git pull origin master"  # Remove previous files and pull latest changeschanges from Git
#     - ssh user@your-remote-server "cd /path/to/app && npm install"  # Install dependencies
#     - ssh user@your-remote-server "cd /path/to/app && npm run build"  # Build your app (if applicable)
#     - ssh user@your-remote-server "cd /path/to/app && pm2 restart app"  # Restart your app using a process manager like PM2
#   only:
#     - master  # Deploy only when changes are pushed to the master branch




# deploy:
#   stage: deploy
#   script:
#     - echo "Deploying your Node.js app..."
#     - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa  # Write the SSH private key to a file
#     - chmod 600 ~/.ssh/id_rsa  # Set the correct permissions for the private key file
#     - ssh -o StrictHostKeyChecking=no user@your-remote-server "
#         cd /path/to/app &&
#         export API_KEY=$YOUR_API_KEY &&
#         git pull origin master &&
#         npm install &&
#         npm run build &&
#         pm2 restart app
#       "
#   only:
#     - master  # Deploy only when changes are pushed to the master branch


# deploy:
#   stage: deploy
#   tags:
#   - docker-alpine
#   script:
#     - echo "Deploying your Node.js app..."
#     - apk update
#     - apk add openssh
#     # - echo "$SSH_PRIVATE_KEY" | ssh-add -  # Add private key to SSH agent
#     - ssh-add <(echo "$CD_PK")  # Add the private key to the SSH agent
#     # - ssh -i $SSH_PRIVATE_KEY user@your-server 'cd /path/to/your/app && git pull && npm install && pm2 restart app'
#     - ssh -A -o StrictHostKeyChecking=no "$REMOTE_HOST_USER"@"$REMOTE_HOST_ADDR" "
#         mkdir -p apps/price-crawler
#         cd apps/price-crawler &&
#         git pull origin master &&
#       "
#   # only:
#   #   - master  # Deploy only when changes are pushed to the master branch


deploy_to_server:
  stage: deploy
  # image: node:alpine
  tags:
    - docker-alpine
  variables:
    SSH_PRIVATE_KEY: $CD_PK
  before_script:
    - echo "Deploying your Node.js app..."
    - echo "remote host address '$REMOTE_HOST_ADDR'"
    - echo "remote host address '$REMOTE_HOST_USER'"
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    # - mkdir -p ~/.ssh
    # - chmod 700 ~/.ssh
    - echo -e "Host $SSH_HOST\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
  script:
    - ssh $REMOTE_HOST_USER@$REMOTE_HOST_ADDR 'mkdir -p apps/price-crawler'
    - ssh $REMOTE_HOST_USER@$REMOTE_HOST_ADDR 'cd apps/price-crawler && git pull origin master'
    - ssh $REMOTE_HOST_USER@$REMOTE_HOST_ADDR 'cd apps/price-crawler && npm install'
    # - ssh $SSH_USER@$SSH_HOST 'cd /path/to/app && npm run server'




  environment: production
